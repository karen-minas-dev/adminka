/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './toaster-container.component';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from './toaster.service';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/common/src/directives/ng_class';
import * as import12 from '@angular/common/src/directives/ng_for';
import * as import13 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import14 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/core/src/linker/template_ref';
import * as import17 from './toast.component';
import * as import18 from './toast.component.ngfactory';
import * as import19 from '@angular/platform-browser/src/security/dom_sanitization_service';
import * as import20 from '@angular/core/src/linker/component_factory_resolver';
var renderType_ToasterContainerComponent_Host:import0.RenderComponentType = (null as any);
class _View_ToasterContainerComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _ToasterContainerComponent_0_4:import3.ToasterContainerComponent;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToasterContainerComponent_Host0,renderType_ToasterContainerComponent_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('toaster-container',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_ToasterContainerComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._ToasterContainerComponent_0_4 = new import3.ToasterContainerComponent(this.parentInjector.get(import8.ToasterService),compView_0.ref);
    this._appEl_0.initComponent(this._ToasterContainerComponent_0_4,[],compView_0);
    compView_0.create(this._ToasterContainerComponent_0_4,this.projectableNodes,(null as any));
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.ToasterContainerComponent) && (0 === requestNodeIndex))) { return this._ToasterContainerComponent_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._ToasterContainerComponent_0_4.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._ToasterContainerComponent_0_4.ngOnDestroy();
  }
}
function viewFactory_ToasterContainerComponent_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_ToasterContainerComponent_Host === (null as any))) { (renderType_ToasterContainerComponent_Host = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,[],{})); }
  return new _View_ToasterContainerComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const ToasterContainerComponentNgFactory:import10.ComponentFactory<import3.ToasterContainerComponent> = new import10.ComponentFactory<import3.ToasterContainerComponent>('toaster-container',viewFactory_ToasterContainerComponent_Host0,import3.ToasterContainerComponent);
const styles_ToasterContainerComponent:any[] = [];
var renderType_ToasterContainerComponent:import0.RenderComponentType = (null as any);
class _View_ToasterContainerComponent0 extends import1.AppView<import3.ToasterContainerComponent> {
  _text_0:any;
  _el_1:any;
  _NgClass_1_3:import11.NgClass;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _appEl_3:import2.AppElement;
  _TemplateRef_3_5:any;
  _NgFor_3_6:import12.NgFor;
  _text_4:any;
  _text_5:any;
  /*private*/ _expr_0:any;
  _arr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToasterContainerComponent0,renderType_ToasterContainerComponent,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this.renderer.setElementAttribute(this._el_1,'class','ng-animate');
    this.renderer.setElementAttribute(this._el_1,'id','toast-container');
    this._NgClass_1_3 = new import11.NgClass(this.parentInjector.get(import13.IterableDiffers),this.parentInjector.get(import14.KeyValueDiffers),new import15.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n            ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._appEl_3 = new import2.AppElement(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import16.TemplateRef_(this._appEl_3,viewFactory_ToasterContainerComponent1);
    this._NgFor_3_6 = new import12.NgFor(this._appEl_3.vcRef,this._TemplateRef_3_5,this.parentInjector.get(import13.IterableDiffers),this.ref);
    this._text_4 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n        ',(null as any));
    this._expr_0 = import7.UNINITIALIZED;
    this._arr_0 = import4.pureProxy2((p0:any,p1:any):any[] => {
      return [
        p0,
        p1
      ]
      ;
    });
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    this.init([],[
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5
    ]
    ,[],[]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import12.NgFor) && (3 === requestNodeIndex))) { return this._NgFor_3_6; }
    if (((token === import11.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._NgClass_1_3; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    var changes:{[key: string]:import7.SimpleChange} = (null as any);
    const currVal_0:any = 'ng-animate';
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this._NgClass_1_3.klass = currVal_0;
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this._arr_0(this.context.toasterconfig.positionClass,this.context.toasterconfig.animationClass);
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this._NgClass_1_3.ngClass = currVal_1;
      this._expr_1 = currVal_1;
    }
    if (!throwOnChange) { this._NgClass_1_3.ngDoCheck(); }
    changes = (null as any);
    const currVal_2:any = this.context.toasts;
    if (import4.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this._NgFor_3_6.ngForOf = currVal_2;
      if ((changes === (null as any))) { (changes = {}); }
      changes['ngForOf'] = new import7.SimpleChange(this._expr_2,currVal_2);
      this._expr_2 = currVal_2;
    }
    if ((changes !== (null as any))) { this._NgFor_3_6.ngOnChanges(changes); }
    if (!throwOnChange) { this._NgFor_3_6.ngDoCheck(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_ToasterContainerComponent0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.ToasterContainerComponent> {
  if ((renderType_ToasterContainerComponent === (null as any))) { (renderType_ToasterContainerComponent = viewUtils.createRenderComponentType('',0,import9.ViewEncapsulation.None,styles_ToasterContainerComponent,{})); }
  return new _View_ToasterContainerComponent0(viewUtils,parentInjector,declarationEl);
}
class _View_ToasterContainerComponent1 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _NgClass_0_4:import11.NgClass;
  _ToastComponent_0_5:import17.ToastComponent;
  _text_1:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_ToasterContainerComponent1,renderType_ToasterContainerComponent,import6.ViewType.EMBEDDED,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.renderer.createElement((null as any),'div',(null as any));
    this.renderer.setElementAttribute(this._el_0,'class','toast');
    this.renderer.setElementAttribute(this._el_0,'toastComp','');
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = import18.viewFactory_ToastComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._NgClass_0_4 = new import11.NgClass(this.parent.parentInjector.get(import13.IterableDiffers),this.parent.parentInjector.get(import14.KeyValueDiffers),new import15.ElementRef(this._el_0),this.renderer);
    this._ToastComponent_0_5 = new import17.ToastComponent(this.parent.parentInjector.get(import19.DomSanitizer),this.parent.parentInjector.get(import20.ComponentFactoryResolver),compView_0.ref);
    this._appEl_0.initComponent(this._ToastComponent_0_5,[],compView_0);
    this._text_1 = this.renderer.createText((null as any),'\n            ',(null as any));
    compView_0.create(this._ToastComponent_0_5,[],(null as any));
    var disposable_0:Function = this.renderer.listen(this._el_0,'click',this.eventHandler(this._handle_click_0_0.bind(this)));
    var disposable_1:Function = this.renderer.listen(this._el_0,'clickEvent',this.eventHandler(this._handle_clickEvent_0_1.bind(this)));
    var disposable_2:Function = this.renderer.listen(this._el_0,'mouseover',this.eventHandler(this._handle_mouseover_0_2.bind(this)));
    var disposable_3:Function = this.renderer.listen(this._el_0,'mouseout',this.eventHandler(this._handle_mouseout_0_3.bind(this)));
    this._expr_4 = import7.UNINITIALIZED;
    this._expr_5 = import7.UNINITIALIZED;
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    const subscription_0:any = this._ToastComponent_0_5.clickEvent.subscribe(this.eventHandler(this._handle_clickEvent_0_1.bind(this)));
    this.init([].concat([this._el_0]),[
      this._el_0,
      this._text_1
    ]
    ,[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    ,[subscription_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgClass_0_4; }
    if (((token === import17.ToastComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._ToastComponent_0_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_4:any = 'toast';
    if (import4.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this._NgClass_0_4.klass = currVal_4;
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.parent.context.toasterconfig.typeClasses[this.context.$implicit.type];
    if (import4.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this._NgClass_0_4.ngClass = currVal_5;
      this._expr_5 = currVal_5;
    }
    if (!throwOnChange) { this._NgClass_0_4.ngDoCheck(); }
    const currVal_6:any = this.context.$implicit;
    if (import4.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this._ToastComponent_0_5.toast = currVal_6;
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.parent.context.toasterconfig.iconClasses[this.context.$implicit.type];
    if (import4.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this._ToastComponent_0_5.iconClass = currVal_7;
      this._expr_7 = currVal_7;
    }
    if (((this.numberOfChecks === 0) && !throwOnChange)) { this._ToastComponent_0_5.ngOnInit(); }
    this.detectContentChildrenChanges(throwOnChange);
    this.detectViewChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._ToastComponent_0_5.ngAfterViewInit(); } }
  }
  private _handle_click_0_0($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.click(this.context.$implicit)) !== false);
    return (true && pd_0);
  }
  private _handle_clickEvent_0_1($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.childClick($event)) !== false);
    return (true && pd_0);
  }
  private _handle_mouseover_0_2($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.stopTimer(this.context.$implicit)) !== false);
    return (true && pd_0);
  }
  private _handle_mouseout_0_3($event:any):boolean {
    this.markPathToRootAsCheckOnce();
    const pd_0:any = ((<any>this.parent.context.restartTimer(this.context.$implicit)) !== false);
    return (true && pd_0);
  }
}
function viewFactory_ToasterContainerComponent1(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  return new _View_ToasterContainerComponent1(viewUtils,parentInjector,declarationEl);
}